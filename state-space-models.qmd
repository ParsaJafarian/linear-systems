---
title: State space models
---

The main idea behind state space models is to express constant coefficient linear differential equations as a first order **vector** differential equation. This representation allows us to use linear algebra to design controllers.

As an example, let's start with a simple example to understand how state space modeling works. Let's consider an LCR circuit shown in @fig-lcr.

![A simple circuit](figures/svg/circuits1.svg){#fig-lcr}


Let $i(t)$ denote the loop current and $q(t)$ denote the charge across the capicitor. 

One way to solve this system is to use Kirchoff's law to get
\begin{equation}\label{eq:KCL}
v(t) = Ri(t) + L \frac{di(t)}{dt} + \frac 1C \int i(t) dt.
\end{equation}
Then, using $i(t) = dq(t)/dt$, we get
\begin{equation}\label{eq:2nd-order}
L\frac{d^2 q(t)}{dt^2} + R \frac{dq(t)}{dt} + \frac 1C q(t) = v(t).
\end{equation}
This is a second order linear differential equation, which we can solve in multiple ways. 

An alternative way, instead of using Kirchoff's law to get a second order differetial equation, is two write two coupled first-order differetial equations:
\begin{align*}
  \frac{dq(t)}{dt} &= i(t) \\
  \frac{di(t)}{dt} &= -\frac{R}{L} i(t) - \frac{1}{LC} q(t) + \frac{1}{LC} v(t)
\end{align*}
where the second equation is a rearrangement of \eqref{eq:KCL}. We can write these two equations in vector form. In particular, let $x(t) = \MATRIX{q(t) \\ i(t)}$. Then,
$$
\dot x(t) = \MATRIX{ \frac{dq(t)}{dt} \\ \frac{di(t)}{dt} }
     =
     \MATRIX{0 & 1 \\ \frac{-1}{LC} & \frac{-R}{L}}
     \MATRIX{q(t) \\ i(t)} 
     +
     \MATRIX{0 \\ \frac{1}{L}} v(t).
$$
If we think of the voltage across the capacitor as output (and denote it by $y(t)$), then
$$y(t) = \frac{1}{C} q(t) = \MATRIX{\frac 1C & 0}\MATRIX{q(t) \\ i(t)}.$$
Thus, we have a system of differential equations (where the input $u(t)$ is equal to the voltage $v(t)$)
\begin{align}
\dot x(t) &= A x(t) + B u(t) \label{eq:SS-1}\\
y(t) &= C x(t) \label{eq:SS-2}
\end{align}
Thus, the second-order DE \eqref{eq:2nd-order} is equivalent with a first-order DE \eqref{eq:SS-1}--\eqref{eq:SS-2} with **a state of dimention 2**.

:::{.callout-warning}
#### Non-uniqueness of the representation
The state $x(t)$ is not unique. We will show later that there are multiple state space representations corresponding to the same DE.
:::

## Canoncial representations
In the previous example, we constructed the state space representation "by hand". We now consider a few "automatic" methods of constructing state space representations from a DE. 

We assume that we are either given a _normalized_ DE (i.e., the leading coefficient is 1):
$$
\frac{d^n y(t)}{dt^n} + a_{n-1} \frac{d^{n-1}y(t)}{dt} 
+ \cdots + a_0  y(t)
=
b_m \frac{d^m u(t)}{dt^m} + \cdots + b_0 u(t)
$$
or a _normalized_ TF
$$G(s) = \frac{b_m s^m + \cdots + b_0}{s^n + a_{n-1}s^{n-1} + \cdots + a_0}.$$

We will consider three **canoncial** representations of a DE or TF in SS (state space) form:

1. Controllable Canonical Form (CCF)
2. Observable Canonical Form (OCF)
3. Diagonal Canonical Form (DCF)

In the discussion below, we assume that the TF is **strictly proper** (i.e., $m < n$). The formulas for the case $m = n$ are a bit different.


### Controllable Canonical Form (CCF)

### Observable Canonical Form (OCF)

### Diagonal Canonical Form (DCF)

## From state space models to transfer functions

So far, we have seen how to write different SS representations from a TF. It is also possible to go in the other directions. 

Suppose we have a SS system:
\begin{align*}
\dot x(t) &= A x(t) + B u(t) \\
y(t) &= C x(t)
\end{align*}
Then the transfer function is
$$
  \bbox[5pt,border: 1px solid]
  {G(s) = C(sI - A)^{-1} B }
$$

:::{.callout-note collapse="true"} 
#### Derivation of the formula

Take LT of the SS model:
\begin{align*}
s X(s) &= A X(s) + B U(s) 
& \implies&&
X(s) &= (sI - A)^{-1} B U(s) \\
Y(s) &= C X(s)
& \implies&&
Y(s) &= C(sI - A)^{-1} B U(s)
\end{align*}

Hence,
$$ G(s) = \frac{Y(s)}{U(s)} = C(sI - A)^{-1} B.$$

:::

We can think of this in terms of the following block diagram. 

<!-- TODO: Add block diagram --> 

The TF can be "read backwards" from the block diagram.

:::{#exm-SS-to-TF-1}
Let $A = \MATRIX{-1 & 2 \\ 3 & -1}$, $B = \MATRIX{1 \\ 0}$, and $C = \MATRIX{2 & 1}$. Find the TF?
:::

:::{.callout-note collapse="true"} 
#### Solution

Note that
$$sI - A = \MATRIX{s+1 & -2 \\ -3 & s+1}.$$

Therefore,
$$\det(sI-A) = (s+1)^2 - 6 = s^2 + 2s -5. $$

Hence,
$$(sI - A)^{-1} = \frac{1}{\det(sI-A)} \MATRIX{s+1 & 2 \\ 3 & s+1}.$$

Finally,
$$G(s) = C(sI-A)^{-1}B 
=
\frac{1}{\det(sI-A)} \MATRIX{2 & 1} \MATRIX{s+1 & 2 \\ 3 & s+1} \MATRIX{1 \\ 0}
= \frac{2s + 5}{s^2 + 2s - 5}.$$
:::

Recall that $\det(sI-A)$ is the characteristic equation of $A$ and the roots of the characteristic equation are the eigenvalues of $A$. Therefore, an important implication of the above formula is
$$\bbox[5pt,border: 1px solid]
{\text{Poles of $G(s)$} = \text{evals of $A$}}$$
This means that we can control the poles of the TF by controlling the eigenvalues of $A$. 

**Changing the eigenvalues of the $A$ matrix will be one of the most simple and the most important design methods that we will learn in this course.**

## Change of coordinates

A key idea for controller design using state space methods is change of coordinates. To fix ideas, we first review the change of coordinates for vectors and then we will come back to SS models. 

Consider a vector space $\reals^2$. The standard basis for $\reals^2$ is 
$$
e_1 = \MATRIX{1 \\ 0}
\quad\text{and}\quad
e_2 = \MATRIX{0 \\ 1}.
$$
When we write $x = \MATRIX{x_1 \\ x_2} \in \reals^2$, what we really mean is
$$x = x_1 e_1 + x_2 e_2.$$

What happens if we choose a different basis, say $v_1$ and $v_2$. If the vector
$$
  x = \tilde x_1 v_1 + \tilde x_2 v_2
$$
then we can say that the vector is equal to $\MATRIX{\tilde x_1 \\ \tilde x_2}$ in the coordinate system $(v_1, v_2)$. Note that the vector hasn't changed, only the coodinate system has.

We use the following example to illustrate how to move from one coordinate system to another

:::{#exm-change-of-coordinates}
Let $x = \MATRIX{2 \\ 3}$. Find its representation in the coordinate system
$$v_1 = \MATRIX{1 \\ 0}
\quad\text{and}\quad
v_2 = \MATRIX{1 \\ 1}.
$$

#### Solution

Let the representation in the new coordinate system be $\tilde x = \MATRIX{\tilde x_1 \\ \tilde x_2}$. Thus, we must have
$$
2 e_1 + 3 e_2 = \tilde x_1 v_1 + \tilde x_2 v_2.
$$
Or, in vector form,
$$ \MATRIX{1 & 0 \\ 0 & 1} \MATRIX{2 \\ 3}
=
\MATRIX{1 & 1 \\ 0 & 1} \MATRIX{\tilde x_1 \\ \tilde x_2}
$$
which can be written as
$$\bbox[5pt,border: 1px solid]
{ x = T \tilde x}
$$
where 
$$T = \MATRIX{v_1 & v_2} = \MATRIX{1 & 1 \\ 0 & 1}.$$
The matrix $T$ is full rank (which is always the case if $\text{span}(v_1,v_2) = \reals^2$. Thus, we have
$$\bbox[5pt,border: 1px solid]
{ \tilde x = T^{-1} x}
$$

So, for the above example we have
$$\tilde x = \MATRIX{1 & 1 \\ 0 & 1}^{-1} \MATRIX{2 \\ 3}
= \MATRIX{-1 \\ 3}.$$

<!-- TODO: Draw a picture -->
:::

## Change of coordinates in SS models.

Consider a SS model:
\begin{align*}
\dot x(t) &= A x(t) + B u(t) \\
y(t) &= C x(t)
\end{align*}

Let $T$ be any invertible $n Ã— n$ matrix. Such a matrix is called a **similarity matrix**. Think of columns of $T$ as the basis of a new coordinate system. Then, the state can be written as
$$ \tilde x(t) = T^{-1} x(t) $$ 
in the new coordinate system.

- What are the stae space equations in the new coordinate system?
- How does the change of coordinates affect the TF?

We look at both these questions in detail. 

Since $\tilde x(t) = T^{-1} x(t)$, we have $x(t) = T \tilde x(t)$. Substituting this in the SS model, we have
\begin{align*}
T \dot {\tilde x}(t) &= A T \tilde x(t) + B u(t) \\
y(t) &= C T \tilde x(t)
\end{align*}

Pre-multiply the first equation by $T^{-1}$:
\begin{align*}
\dot {\tilde x}(t) &= T^{-1} A T \tilde x(t) + T^{-1} B u(t) \\
y(t) &= C T \tilde x(t)
\end{align*}

So, we can think of this as a new SS model:
\begin{align*}
\dot {\tilde x}(t) &= \tilde A \tilde x(t) + \tilde B u(t) \\
y(t) &= \tilde C \tilde x(t)
\end{align*}
where
$$\bbox[5pt,border: 1px solid]
{\tilde A = T^{-1} A T,
 \quad
 \tilde B = T^{-1} B,
 \quad
 \tilde C = CT}
$$

The coordinate transformation has the following properties:

1. **Coordinate transformation does not change the characteristic function**

   Note that
   \begin{align*}
   (sI - \tilde A) &= sI - T^{-1} A T \\
   &= s T^{-1} I T - T^{-1} A T \\
   &= T^{-1} (sI - A) T.
   \end{align*}
   Therefore,
   $$
   \det(sI - \tilde A) = \det(T^{-1}) \det(sI - A) \det(T) 
   = \det(sI - A)
   $$
   because $\det(T^{-1}) \det(T) = \det(T^{-1} T) = \det(I) = 1$.

2. **Coordinate transformation does not change the TF**

   The transfer function in the new coordinate system is
   \begin{align*}
   \tilde G(s) &= \tilde C(sI - \tilde A)^{-1} \tilde B \\
   &= C T T^{-1} (sI - A)^{-1} T T^{-1} B \\
   &= C(sI - A)^{-1} B = G(s)
   \end{align*}
   
These properties hold because the change of coordinates (or similarity transformation) does not physically change the state; it only changes the coordinate system that we are using to represent the state. 

Change of coordinates (or similarity transformation) is a very useful tool for control system syntehsis. As we will see later, it is easy to design controllers for systems in CCF. So, when we have to design controllers for systems not in CCF, we first find a similarity transformation that converts the system to CCF; then we design a controller for the system in CCF; and finally we convert the controller back to the original coordinate system. Don't worry if this doesn't make sense notw. We will discuss this in detail in the next few lectures.
